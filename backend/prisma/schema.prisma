// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MODE {
  AI
  CLASSIC
}

enum REQUEST {
  PENDING
  ACCEPTED
  DECLINED
}

model User {
  id Int @id @default(autoincrement())
  intraId String @unique 
  
  email String  @unique
  hash  String?

  fullName String  @unique
  userName String  @unique
  country  String?
  number   String? @unique

  twoFactorAuthSecret    String?
  isTwoFactorAuthEnabled Boolean @default(false)

  photo String?

  level LadderLevel?

  achievements Boolean[] @default([false, false, false, false, false])

  sentRequests     Friends[] @relation("sentRequests")
  receivedRequests Friends[] @relation("receivedRequests")

  blocking Blocks[] @relation("blocking")
  blocked  Blocks[] @relation("blocked")

  player1             MatchHistory[]  @relation("Player1")
  player2             MatchHistory[]  @relation("Player2")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friends {
  id Int @id @default(autoincrement())

  sender   User @relation("sentRequests", fields: [senderId], references: [id])
  senderId Int

  receiver   User @relation("receivedRequests", fields: [receiverId], references: [id])
  receiverId Int

  status REQUEST

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blocks {
  id Int @id @default(autoincrement())

  blocking   User @relation("blocking", fields: [blockingId], references: [id])
  blockingId Int

  blocked   User @relation("blocked", fields: [blockedId], references: [id])
  blockedId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatchHistory {
  id Int @id @default(autoincrement())

  player1   User     @relation("Player1", fields: [player1Id], references: [id])
  player1Id Int

  player2   User     @relation("Player2", fields: [player2Id], references: [id])
  player2Id Int

  score1 Int @default(0)
  score2 Int @default(0)

  mode MODE

  date DateTime @default(now())
}

model LadderLevel {
  id Int @id @default(autoincrement())

  user User @relation( fields: [userId], references: [id] )
  userId Int @unique

  wins   Int[] @default([0, 0])
  losses Int[] @default([0, 0])
  
  level Float @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}